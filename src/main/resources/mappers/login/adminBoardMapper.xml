<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.repository.AdminBoardMapper">

    <sql id="criteriaBoardMaster">
        <if test="searchType != null and searchKeyword != null">
            <trim prefix="AND (" suffix=")" prefixOverrides="OR">
                <foreach item="type" collection="typeArr">
                    <trim prefix="OR">
                        <choose>
                            <when test="searchType=='T'.toString">
                                (BOARD_NM LIKE CONCAT('%',#{searchKeyword},'%'))
                            </when>
                            <when test="searchType=='C'.toString()">
                                (BOARD_DESC LIKE CONCAT('%',#{searchKeyword},'%'))
                            </when>
                            <when test="searchType=='W'.toString()">
                                (
                                    A.CREATE_IDX IN
                                        (
                                            SELECT IDX
                                              FROM USERS
                                             WHERE USER_NICKNM LIKE CONCAT('%',#{searchKeyword},'%')
                                        )
                                )
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </trim>
        </if>
    </sql>

    <sql id="criteriaQna">
        <if test="searchType != null and searchKeyword != null">
            <trim prefix="AND (" suffix=")" prefixOverrides="OR">
                <foreach item="type" collection="typeArr">
                    <trim prefix="OR">
                        <choose>
                            <when test="searchType=='T'.toString">
                                (QA_SUBJECT LIKE CONCAT('%',#{searchKeyword},'%'))
                            </when>
                            <when test="searchType=='W'.toString()">
                                (
                                     CREATE_IDX IN
                                                (
                                                    SELECT IDX
                                                      FROM USERS
                                                     WHERE USER_NICKNM LIKE CONCAT('%',#{searchKeyword},'%')
                                                )
                                )
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </trim>
        </if>
    </sql>

    <sql id="criteriaContent">
        <if test="searchType != null and searchKeyword != null">
            <trim prefix="AND (" suffix=")" prefixOverrides="OR">
                <foreach item="type" collection="typeArr">
                    <trim prefix="OR">
                        <choose>
                            <when test="searchType=='T'.toString">
                                (CONTENT_NM LIKE CONCAT('%',#{searchKeyword},'%'))
                            </when>
                            <when test="searchType=='W'.toString()">
                                (
                                A.CREATE_IDX IN
                                                (
                                                    SELECT IDX
                                                      FROM USERS
                                                     WHERE USER_NICKNM LIKE CONCAT('%',#{searchKeyword},'%')
                                                )
                                )
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </trim>
        </if>
    </sql>

    <select id="findAllBoardMaster" resultType="CustomMap" parameterType="Criteria">
        SELECT A.IDX,
               A.board_ID,
               A.BOARD_NM,
               A.BOARD_DESC,
               A.BOARD_TYPE,
               A.FILE_ATTACH_YN,
               A.USE_YN,
               IFNULL(C.USER_NICKNM,'탈퇴된 관리자')AS CREATE_NICKNM,
               A.CREATE_IDX,
               A.CREATE_DATE,
               IF( A.UPDATE_IDX IS NULL , NULL, IFNULL(D.USER_NICKNM,'탈퇴된 관리자')) AS UPDATE_NICKNM,
               A.UPDATE_IDX,
               A.UPDATE_DATE,
               A.DELETE_YN,
               IFNULL(B.CNT,'0') AS CNT
          FROM board_master A
          LEFT JOIN (
                        SELECT COUNT(A.IDX) AS CNT,
                               MASTER_IDX
                          FROM BOARD A
                          LEFT JOIN BOARD_MASTER B ON A.MASTER_IDX = B.IDX
                         WHERE A.MASTER_IDX = B.IDX
                         GROUP BY MASTER_IDX
                    ) B ON A.IDX = B.MASTER_IDX
          LEFT JOIN USERS C ON A.CREATE_IDX = C.IDX
          LEFT JOIN USERS D ON A.UPDATE_IDX = D.IDX
         WHERE A.DELETE_YN = 'N'
        <include refid="criteriaBoardMaster"/>
    </select>

    <insert id="insertBoardMaster" parameterType="map">
        INSERT INTO board_master
            (
                 BOARD_ID,
                 BOARD_NM,
                 BOARD_DESC,
                 BOARD_TYPE,
                 FILE_ATTACH_YN,
                 USE_YN,
                 CREATE_IDX,
                 CREATE_DATE,
                 UPDATE_IDX,
                 UPDATE_DATE,
                 DELETE_YN
             )
        VALUES
            (
                 #{boardId},
                 #{boardNm},
                 #{boardDesc},
                 #{boardType},
                 #{fileAttachYn},
                 #{useYn},
                 #{userIdx},
                 date_format(SYSDATE(), '%Y-%m-%d %h:%i:%s'),
                 NULL,
                 NULL,
                 'N'
            )
    </insert>

    <select id="existsBoardId" parameterType="map" resultType="int">
        SELECT COUNT(*)
          FROM board_master
         WHERE BOARD_ID = #{boardId}
    </select>

    <update id="updateBoardMaster" parameterType="map">

        UPDATE board_master
           SET BOARD_ID= #{boardId},
               BOARD_NM= #{boardNm},
               BOARD_DESC= #{boardDesc},
               BOARD_TYPE=#{boardType},
               FILE_ATTACH_YN=#{fileAttachYn},
               USE_YN=#{useYn},
               UPDATE_IDX= #{userIdx},
               UPDATE_DATE= SYSDATE()
         WHERE IDX= #{idx}

    </update>

    <select id="findByIdxBoardMaster" parameterType="int" resultType="BoardMaster">
        SELECT A.IDX,
               A.board_ID,
               A.BOARD_NM,
               A.BOARD_DESC,
               A.BOARD_TYPE,
               A.FILE_ATTACH_YN,
               A.USE_YN,
               IFNULL(C.USER_NICKNM,'탈퇴된 관리자') AS CREATE_NICKNM,
               A.CREATE_IDX,
               A.CREATE_DATE,
               IF( A.UPDATE_IDX IS NULL , NULL, IFNULL(D.USER_NICKNM,'탈퇴된 관리자')) AS UPDATE_NICKNM,
               A.UPDATE_IDX,
               A.UPDATE_DATE,
               A.DELETE_YN,
               IFNULL(B.CNT,'0') AS CNT
          FROM board_master A
          LEFT JOIN (
                        SELECT COUNT(A.IDX) AS CNT,
                               MASTER_IDX
                          FROM BOARD A
                          LEFT JOIN BOARD_MASTER B ON A.MASTER_IDX = B.IDX
                         WHERE A.MASTER_IDX = B.IDX
                         GROUP BY MASTER_IDX
                    ) B ON A.IDX = B.MASTER_IDX
          LEFT JOIN USERS C ON A.CREATE_IDX = C.IDX
          LEFT JOIN USERS D ON A.UPDATE_IDX = D.IDX
         WHERE A.IDX = #{idx}
    </select>

    <update id="deleteBoardMaster" parameterType="map">
        UPDATE board_master
           SET BOARD_ID = NULL,
               UPDATE_IDX= #{userIdx},
               UPDATE_DATE= SYSDATE(),
               DELETE_YN = 'Y'
         WHERE IDX= #{idx}
    </update>

    <select id="findAllContent" parameterType="map" resultType="CustomMap">
        SELECT A.IDX,
               A.CONTENT_ID,
               A.CONTENT_NM,
               A.CONTENT_HTML,
               A.HIT,
               A.USE_YN,
               A.CREATE_IDX,
               A.CREATE_DATE,
               A.UPDATE_IDX,
               A.UPDATE_DATE,
               IFNULL(B.USER_NICKNM,'탈퇴된 관리자') AS CREATE_NICKNM,
               IF( A.UPDATE_IDX IS NULL , NULL, IFNULL(C.USER_NICKNM,'탈퇴된 관리자')) AS UPDATE_NICKNM
          FROM content A
          LEFT JOIN USERS B ON A.CREATE_IDX = B.IDX
          LEFT JOIN USERS C ON A.UPDATE_IDX = C.IDX
         WHERE 1=1
        <include refid="criteriaContent"/>
    </select>

    <select id="findByIdxContent" resultType="Content" parameterType="int">
        SELECT IDX,
               CONTENT_ID,
               CONTENT_NM,
               CONTENT_HTML,
               HIT,
               USE_YN,
               CREATE_IDX,
               CREATE_DATE,
               UPDATE_IDX,
               UPDATE_DATE
          FROM CONTENT
         WHERE IDX = #{idx}
    </select>

    <insert id="insertContent" parameterType="map">
        INSERT INTO content
            (
                 CONTENT_ID,
                 CONTENT_NM,
                 CONTENT_HTML,
                 USE_YN,
                 CREATE_IDX,
                 CREATE_DATE
             )
        VALUES
            (
                #{contentId},
                #{contentNm},
                #{contentHtml},
                'Y',
                #{userIdx},
                SYSDATE()
            )

    </insert>

    <select id="existsContentId" parameterType="map" resultType="int">
        SELECT COUNT(*)
          FROM content
         WHERE CONTENT_ID = #{contentId}
    </select>

    <update id="updateContent" parameterType="map">
        UPDATE content
           SET CONTENT_ID = #{contentId},
               CONTENT_NM = #{contentNm},
               CONTENT_HTML = #{contentHtml},
               HIT = #{hit},
               USE_YN = #{useYn},
               UPDATE_IDX= #{userIdx},
               UPDATE_DATE= SYSDATE()
         WHERE IDX= #{idx}
    </update>

    <delete id="deleteContent" parameterType="map">
        DELETE FROM content
         WHERE IDX=#{idx}
    </delete>

    <select id="findAllQna" parameterType="map" resultType="CustomMap">
        WITH RECURSIVE CTE AS
           (
               SELECT IDX,
                      convert(idx, char(100)) as CTE_PATH,
                      1 LVL,
                      PARENT_IDX,
                      QA_CATEGORY,
                      QA_SUBJECT,
                      QA_STATUS,
                      SECRET_YN,
                      USE_YN,
                      CREATE_IDX,
                      CREATE_DATE,
                      UPDATE_IDX,
                      UPDATE_DATE
                 FROM QNA Q
                WHERE PARENT_IDX IS NULL
                UNION ALL
               SELECT Q.IDX,
                      concat(CTE.CTE_PATH, '-', Q.IDX) AS CTE_PATH,
                      LVL + 1 LVL,
                      Q.PARENT_IDX,
                      Q.QA_CATEGORY,
                      Q.QA_SUBJECT,
                      Q.QA_STATUS,
                      Q.SECRET_YN,
                      Q.USE_YN,
                      Q.CREATE_IDX,
                      Q.CREATE_DATE,
                      Q.UPDATE_IDX,
                      Q.UPDATE_DATE
                 FROM QNA Q
                INNER JOIN CTE ON Q.PARENT_IDX = CTE.IDX
           )
           SELECT @ROWNUM:=@ROWNUM+1 AS RN,
		          IDX,
		          PARENT_IDX,
		          LVL,
		          CTE_PATH
             FROM CTE,
                  (SELECT @ROWNUM:=0) AS temp
            WHERE LVL = 1
        <if test="paramMap.status != null">
            AND QA_STATUS = #{paramMap.status}
        </if>
        <include refid="criteriaQna"/>
            ORDER BY CTE_PATH
            LIMIT #{pageStart},#{amount}
    </select>

    <select id="countQna" resultType="int" parameterType="map">
        SELECT COUNT(*)
          FROM (
                    WITH RECURSIVE CTE AS
                        (
                             SELECT IDX,
                                    convert(idx, char(100)) as CTE_PATH,
                                    1 LVL,
                                    PARENT_IDX,
                                    QA_CATEGORY,
                                    QA_SUBJECT,
                                    QA_STATUS,
                                    SECRET_YN,
                                    USE_YN,
                                    CREATE_IDX,
                                    CREATE_DATE,
                                    UPDATE_IDX,
                                    UPDATE_DATE
                               FROM QNA Q
                              WHERE PARENT_IDX IS NULL
                              UNION ALL
                             SELECT Q.IDX,
                                    concat(CTE.CTE_PATH, '-', Q.IDX) AS CTE_PATH,
                                    LVL + 1 LVL,
                                    Q.PARENT_IDX,
                                    Q.QA_CATEGORY,
                                    Q.QA_SUBJECT,
                                    Q.QA_STATUS,
                                    Q.SECRET_YN,
                                    Q.USE_YN,
                                    Q.CREATE_IDX,
                                    Q.CREATE_DATE,
                                    Q.UPDATE_IDX,
                                    Q.UPDATE_DATE
                               FROM QNA Q
                              INNER JOIN CTE ON Q.PARENT_IDX = CTE.IDX
                        )
                             SELECT @ROWNUM:=@ROWNUM+1 AS RN,
                                    IDX,
                                    PARENT_IDX,
                                    LVL,
                                    CTE_PATH,
                                    QA_CATEGORY,
                                    QA_SUBJECT,
                                    QA_STATUS,
                                    SECRET_YN,
                                    USE_YN,
                                    CREATE_IDX,
                                    CREATE_DATE,
                                    UPDATE_IDX,
                                    UPDATE_DATE
                               FROM CTE,
                                    (SELECT @ROWNUM:=0) AS temp
                              WHERE LVL = 1
                            <if test="paramMap.status != null">
                                AND QA_STATUS = #{paramMap.status}
                            </if>
                            <include refid="criteriaQna"/>
              ) AS CNT_TB
    </select>

    <select id="findByIdxQna" parameterType="int" resultType="map">
        WITH RECURSIVE CTE AS
                           (
                               SELECT IDX,
                                      convert(idx, char(100)) as CTE_PATH,
                                      1 LVL,
                                      PARENT_IDX,
                                      QA_CATEGORY,
                                      QA_SUBJECT,
                                      QA_STATUS,
                                      SECRET_YN,
                                      USE_YN,
                                      CREATE_IDX,
                                      CREATE_DATE,
                                      UPDATE_IDX,
                                      UPDATE_DATE
                                 FROM QNA Q
                                WHERE IDX = 1
                                UNION ALL
                               SELECT Q.IDX,
                                      concat(CTE.CTE_PATH, '-', Q.IDX) AS CTE_PATH,
                                      LVL + 1 LVL,
                                      Q.PARENT_IDX,
                                      Q.QA_CATEGORY,
                                      Q.QA_SUBJECT,
                                      Q.QA_STATUS,
                                      Q.SECRET_YN,
                                      Q.USE_YN,
                                      Q.CREATE_IDX,
                                      Q.CREATE_DATE,
                                      Q.UPDATE_IDX,
                                      Q.UPDATE_DATE
                                 FROM QNA Q
                                INNER JOIN CTE ON Q.PARENT_IDX = CTE.IDX
                           )
                    SELECT IDX,
                           PARENT_IDX,
                           LVL,
                           CTE_PATH,
                           QA_CATEGORY,
                           QA_SUBJECT,
                           QA_STATUS,
                           SECRET_YN,
                           USE_YN,
                           CREATE_IDX,
                           CREATE_DATE,
                           UPDATE_IDX,
                           UPDATE_DATE
                    FROM CTE
    </select>

    <update id="updateOriginalQna" parameterType="int">
        UPDATE qna
           SET QA_STATUS = #{qaStatus}
         WHERE idx = #{originalIdx}
    </update>

    <insert id="answerQna" parameterType="map">
        INSERT INTO qna
            (
                 PARENT_IDX,
                 QA_EMAIL_RECV_YN,
                 QA_CATEGORY,
                 QA_SUBJECT,
                 QA_CONTENT,
                 QA_FILE,
                 USE_YN,
                 CREATE_IDX,
                 CREATE_DATE
             )
        VALUES
            (
                #{parentIdx},
                #{qaEmailRecvYn},
                #{qaCategory},
                #{qaSubject},
                #{qaContent},
                #{qaFile},
                'Y',
                #{userIdx},
                SYSDATE()
             )

    </insert>
</mapper>