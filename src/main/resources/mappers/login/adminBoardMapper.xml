<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.repository.AdminBoardMapper">

    <sql id="criteriaBoardMaster">
        <if test="searchType != null and searchKeyword != null">
            <trim prefix="AND (" suffix=")" prefixOverrides="OR">
                <foreach item="type" collection="typeArr">
                    <trim prefix="OR">
                        <choose>
                            <when test="searchType=='T'.toString">
                                (BOARD_NM LIKE CONCAT('%',#{searchKeyword},'%'))
                            </when>
                            <when test="searchType=='C'.toString()">
                                (BOARD_DESC LIKE CONCAT('%',#{searchKeyword},'%'))
                            </when>
                            <when test="searchType=='W'.toString()">
                                (
                                    A.CREATE_IDX IN
                                        (
                                            SELECT IDX
                                              FROM USERS
                                             WHERE USER_NICKNM LIKE CONCAT('%',#{searchKeyword},'%')
                                        )
                                )
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </trim>
        </if>
    </sql>

    <sql id="criteriaQna">
        <if test="searchType != null and searchKeyword != null">
            <trim prefix="AND (" suffix=")" prefixOverrides="OR">
                <foreach item="type" collection="typeArr">
                    <trim prefix="OR">
                        <choose>
                            <when test="searchType=='T'.toString">
                                (QA_SUBJECT LIKE CONCAT('%',#{searchKeyword},'%'))
                            </when>
                            <when test="searchType=='W'.toString()">
                                (
                                     A.CREATE_IDX IN
                                                (
                                                    SELECT IDX
                                                      FROM USERS
                                                     WHERE USER_NICKNM LIKE CONCAT('%',#{searchKeyword},'%')
                                                )
                                )
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </trim>
        </if>
    </sql>

    <sql id="criteriaContent">
        <if test="searchType != null and searchKeyword != null">
            <trim prefix="AND (" suffix=")" prefixOverrides="OR">
                <foreach item="type" collection="typeArr">
                    <trim prefix="OR">
                        <choose>
                            <when test="searchType=='T'.toString">
                                (CONTENT_NM LIKE CONCAT('%',#{searchKeyword},'%'))
                            </when>
                            <when test="searchType=='W'.toString()">
                                (
                                A.CREATE_IDX IN
                                                (
                                                    SELECT IDX
                                                      FROM USERS
                                                     WHERE USER_NICKNM LIKE CONCAT('%',#{searchKeyword},'%')
                                                )
                                )
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </trim>
        </if>
    </sql>

    <sql id="criteriaFaqMaster">
        <if test="searchType != null and searchKeyword != null">
            <trim prefix="AND (" suffix=")" prefixOverrides="OR">
                <foreach item="type" collection="typeArr">
                    <trim prefix="OR">
                        <choose>
                            <when test="searchType=='T'.toString">
                                (FAQ_NM LIKE CONCAT('%',#{searchKeyword},'%'))
                            </when>
                            <when test="searchType=='W'.toString()">
                                (
                                A.CREATE_IDX IN
                                    (
                                        SELECT IDX
                                          FROM USERS
                                         WHERE USER_NICKNM LIKE CONCAT('%',#{searchKeyword},'%')
                                    )
                                )
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </trim>
        </if>
    </sql>

    <sql id="criteriaFaq">
        <if test="searchType != null and searchKeyword != null">
            <trim prefix="AND (" suffix=")" prefixOverrides="OR">
                <foreach item="type" collection="typeArr">
                    <trim prefix="OR">
                        <choose>
                            <when test="searchType=='T'.toString">
                                (FAQ_QUESTION LIKE CONCAT('%',#{searchKeyword},'%'))
                            </when>
                            <when test="searchType=='W'.toString()">
                                (
                                    A.CREATE_IDX IN
                                        (
                                            SELECT IDX
                                              FROM USERS
                                             WHERE USER_NICKNM LIKE CONCAT('%',#{searchKeyword},'%')
                                        )
                                )
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </trim>
        </if>
    </sql>



    <select id="findAllBoardMaster" resultType="CustomMap" parameterType="Criteria">
        SELECT A.IDX,
               A.board_ID,
               A.BOARD_NM,
               A.BOARD_DESC,
               A.BOARD_TYPE,
               A.FILE_ATTACH_YN,
               A.USE_YN,
               IFNULL(C.USER_NICKNM,'탈퇴된 관리자')AS CREATE_NICKNM,
               A.CREATE_IDX,
               A.CREATE_DATE,
               IF( A.UPDATE_IDX IS NULL , NULL, IFNULL(D.USER_NICKNM,'탈퇴된 관리자')) AS UPDATE_NICKNM,
               A.UPDATE_IDX,
               A.UPDATE_DATE,
               IFNULL(B.CNT,'0') AS CNT
          FROM board_master A
          LEFT JOIN (
                        SELECT COUNT(A.IDX) AS CNT,
                               MASTER_IDX
                          FROM BOARD A
                          LEFT JOIN BOARD_MASTER B ON A.MASTER_IDX = B.IDX
                         WHERE A.MASTER_IDX = B.IDX
                         GROUP BY MASTER_IDX
                    ) B ON A.IDX = B.MASTER_IDX
          LEFT JOIN USERS C ON A.CREATE_IDX = C.IDX
          LEFT JOIN USERS D ON A.UPDATE_IDX = D.IDX
         WHERE 1 = 1
        <include refid="criteriaBoardMaster"/>
    </select>

    <insert id="insertBoardMaster" parameterType="map">
        INSERT INTO board_master
            (
                 BOARD_ID,
                 BOARD_NM,
                 BOARD_DESC,
                 BOARD_TYPE,
                 FILE_ATTACH_YN,
                 USE_YN,
                 CREATE_IDX,
                 CREATE_DATE,
                 UPDATE_IDX,
                 UPDATE_DATE
             )
        VALUES
            (
                 #{boardId},
                 #{boardNm},
                 #{boardDesc},
                 #{boardType},
                 #{fileAttachYn},
                 #{useYn},
                 #{userIdx},
                 date_format(SYSDATE(), '%Y-%m-%d %h:%i:%s'),
                 NULL,
                 NULL
            )
    </insert>

    <select id="existsBoardId" parameterType="map" resultType="int">
        SELECT COUNT(*)
          FROM board_master
         WHERE BOARD_ID = #{boardId}
    </select>

    <update id="updateBoardMaster" parameterType="map">

        UPDATE board_master
           SET BOARD_ID= #{boardId},
               BOARD_NM= #{boardNm},
               BOARD_DESC= #{boardDesc},
               BOARD_TYPE=#{boardType},
               FILE_ATTACH_YN=#{fileAttachYn},
               USE_YN=#{useYn},
               UPDATE_IDX= #{userIdx},
               UPDATE_DATE= SYSDATE()
         WHERE IDX= #{idx}

    </update>

    <select id="findByIdxBoardMaster" parameterType="int" resultType="CustomMap">
        SELECT A.IDX,
               A.board_ID,
               A.BOARD_NM,
               A.BOARD_DESC,
               A.BOARD_TYPE,
               A.FILE_ATTACH_YN,
               A.USE_YN,
               IFNULL(C.USER_NICKNM,'탈퇴된 관리자') AS CREATE_NICKNM,
               A.CREATE_IDX,
               A.CREATE_DATE,
               IF( A.UPDATE_IDX IS NULL , NULL, IFNULL(D.USER_NICKNM,'탈퇴된 관리자')) AS UPDATE_NICKNM,
               A.UPDATE_IDX,
               A.UPDATE_DATE
               IFNULL(B.CNT,'0') AS CNT
          FROM board_master A
          LEFT JOIN (
                        SELECT COUNT(A.IDX) AS CNT,
                               MASTER_IDX
                          FROM BOARD A
                          LEFT JOIN BOARD_MASTER B ON A.MASTER_IDX = B.IDX
                         WHERE A.MASTER_IDX = B.IDX
                         GROUP BY MASTER_IDX
                    ) B ON A.IDX = B.MASTER_IDX
          LEFT JOIN USERS C ON A.CREATE_IDX = C.IDX
          LEFT JOIN USERS D ON A.UPDATE_IDX = D.IDX
         WHERE A.IDX = #{idx}
    </select>

    <delete id="deleteBoardMaster" parameterType="map">
        DELETE FROM board_master
         WHERE IDX= #{idx}
    </delete>

    <delete id="deleteBoard" parameterType="map">
        DELETE FROM board
         WHERE MASTER_IDX = #{idx}
    </delete>

    <select id="findAllContent" parameterType="map" resultType="CustomMap">
        SELECT A.IDX,
               A.CONTENT_ID,
               A.CONTENT_NM,
               A.CONTENT_HTML,
               A.HIT,
               A.USE_YN,
               A.CREATE_IDX,
               A.CREATE_DATE,
               A.UPDATE_IDX,
               A.UPDATE_DATE,
               IFNULL(B.USER_NICKNM,'탈퇴된 관리자') AS CREATE_NICKNM,
               IF( A.UPDATE_IDX IS NULL , NULL, IFNULL(C.USER_NICKNM,'탈퇴된 관리자')) AS UPDATE_NICKNM
          FROM content A
          LEFT JOIN USERS B ON A.CREATE_IDX = B.IDX
          LEFT JOIN USERS C ON A.UPDATE_IDX = C.IDX
         WHERE 1=1
        <include refid="criteriaContent"/>
    </select>

    <select id="findByIdxContent" resultType="Content" parameterType="int">
        SELECT IDX,
               CONTENT_ID,
               CONTENT_NM,
               CONTENT_HTML,
               HIT,
               USE_YN,
               CREATE_IDX,
               CREATE_DATE,
               UPDATE_IDX,
               UPDATE_DATE
          FROM CONTENT
         WHERE IDX = #{idx}
    </select>

    <insert id="insertContent" parameterType="map">
        INSERT INTO content
            (
                 CONTENT_ID,
                 CONTENT_NM,
                 CONTENT_HTML,
                 USE_YN,
                 CREATE_IDX,
                 CREATE_DATE
             )
        VALUES
            (
                #{contentId},
                #{contentNm},
                #{contentHtml},
                'Y',
                #{userIdx},
                SYSDATE()
            )

    </insert>

    <select id="existsContentId" parameterType="map" resultType="int">
        SELECT COUNT(*)
          FROM content
         WHERE CONTENT_ID = #{contentId}
    </select>

    <update id="updateContent" parameterType="map">
        UPDATE content
           SET CONTENT_ID = #{contentId},
               CONTENT_NM = #{contentNm},
               CONTENT_HTML = #{contentHtml},
               HIT = #{hit},
               USE_YN = #{useYn},
               UPDATE_IDX= #{userIdx},
               UPDATE_DATE= SYSDATE()
         WHERE IDX= #{idx}
    </update>

    <delete id="deleteContent" parameterType="map">
        DELETE FROM content
         WHERE IDX=#{idx}
    </delete>

    <select id="findAllQna" parameterType="map" resultType="CustomMap">
        SELECT @ROWNUM:=@ROWNUM+1 AS RN,
               A.IDX,
               A.QA_SUBJECT,
               B.QA_CATEGORY,
               B.QA_STATUS,
               B.SECRET_YN,
               IF( A.CREATE_IDX IS NULL , NULL, IFNULL(C.USER_NICKNM,'탈퇴된 사용자')) AS CREATE_NICKNM,
               A.CREATE_DATE,
               D.USER_NICKNM AS UPDATE_NICKNM,
               A.UPDATE_DATE
          FROM qna A
          INNER JOIN qna_config B ON A.IDX = B.QNA_IDX
          LEFT OUTER JOIN users C ON A.CREATE_IDX = C.IDX
          LEFT OUTER JOIN users D ON B.UPDATE_IDX = D.IDX,
               (SELECT @ROWNUM:=0) temp
         WHERE PARENT_IDX IS NULL
        <if test="paramMap.status != 'ALL'">
            AND B.QA_STATUS IN('Q' , 'RQ')
        </if>
        <include refid="criteriaQna"/>
        ORDER BY IDX
        LIMIT #{pageStart},#{amount}
    </select>

    <select id="countQna" resultType="int" parameterType="map">
        SELECT COUNT(*)
          FROM (
                    SELECT A.IDX,
                           A.QA_SUBJECT,
                           B.QA_CATEGORY,
                           B.QA_STATUS,
                           B.SECRET_YN,
                           IF( A.CREATE_IDX IS NULL , NULL, IFNULL(C.USER_NICKNM,'탈퇴된 사용자')) AS CREATE_NICKNM,
                           A.CREATE_DATE,
                           D.USER_NICKNM AS UPDATE_NICKNM,
                           B.UPDATE_DATE
                      FROM qna A
                     INNER JOIN qna_config B ON A.IDX = B.QNA_IDX
                      LEFT OUTER JOIN users C ON A.CREATE_IDX = C.IDX
                      LEFT OUTER JOIN users D ON B.UPDATE_IDX = D.IDX
                    WHERE PARENT_IDX IS NULL
                    <if test="paramMap.status != 'ALL'">
                        AND B.QA_STATUS IN('Q' , 'RQ')
                    </if>
                    <include refid="criteriaQna"/>
              ) AS CNT_TB
    </select>

    <select id="findByIdxQna" parameterType="int" resultType="CustomMap">
        SELECT A.IDX,
               QA_SUBJECT,
               QA_CONTENT,
               QA_FILE,
               IF( A.CREATE_IDX IS NULL , NULL, IFNULL(B.USER_NICKNM,'탈퇴된 사용자')) AS CREATE_NICKNM,
               A.CREATE_DATE,
               C.USER_NICKNM AS UPDATE_NICKNM,
               B.UPDATE_DATE
        FROM qna A
        LEFT OUTER JOIN users B on A.CREATE_IDX = B.IDX
        LEFT OUTER JOIN users C on B.UPDATE_IDX = C.IDX
        WHERE A.IDX = #{idx}
           OR A.PARENT_IDX = #{idx}
        ORDER BY A.IDX DESC
    </select>

    <update id="updateOriginalQna" parameterType="map">
        UPDATE qna_config
           SET QA_STATUS = #{qaStatus},
               UPDATE_DATE = SYSDATE(),
               UPDATE_IDX = #{userIdx}
         WHERE QNA_IDX = #{originalIdx}
    </update>

    <insert id="answerQna" parameterType="map">
        INSERT INTO qna
            (
                 PARENT_IDX,
                 QA_SUBJECT,
                 QA_CONTENT,
                 QA_FILE,
                 USE_YN,
                 CREATE_IDX,
                 CREATE_DATE
             )
        VALUES
            (
                #{originalIdx},
                #{qaSubject},
                #{qaContent},
                #{qaFile},
                'Y',
                #{userIdx},
                SYSDATE()
             )

    </insert>

    <delete id="deleteQnaConfig" parameterType="map">
        DELETE FROM qna_config
         WHERE QNA_IDX = #{idx}
    </delete>

    <delete id="deleteQna" parameterType="map">
        DELETE FROM qna
         WHERE IDX=#{idx}
    </delete>

    <select id="findUserEmailByIdx" parameterType="int" resultType="string">
        SELECT USER_EMAIL
          FROM USERS
         WHERE IDX = #{idx}
    </select>

    <select id="findByIdxQnaConfig" resultType="QnaConfig" parameterType="int">
        SELECT QNA_IDX,
               QA_EMAIL_RECV_YN,
               QA_CATEGORY,
               QA_STATUS,
               SECRET_YN,
               CREATE_IDX,
               CREATE_DATE,
               UPDATE_IDX,
               UPDATE_DATE
          FROM qna_config
         WHERE QNA_IDX = #{idx}
    </select>

    <select id="findAllFaqMaster" parameterType="Criteria" resultType="CustomMap">

        SELECT A.IDX,
               A.FAQ_NM,
               A.FM_ORDER,
               A.USE_YN,
               IFNULL(B.USER_NICKNM,'탈퇴된 관리자')AS CREATE_NICKNM,
               A.CREATE_DATE,
               IFNULL(C.USER_NICKNM,'탈퇴된 관리자')AS UPDATE_NICKNM,
               A.UPDATE_DATE
          FROM faq_master AS A
          LEFT JOIN USERS B ON A.CREATE_IDX = B.IDX
          LEFT JOIN USERS C ON A.UPDATE_IDX = C.IDX
         WHERE 1 = 1
        <include refid="criteriaFaqMaster"/>
        ORDER BY FM_ORDER IS NULL, FM_ORDER, CREATE_DATE
    </select>

    <insert id="insertFaqMaster" parameterType="map">
        INSERT INTO faq_master
            (
                FAQ_NM,
                FM_ORDER,
                USE_YN,
                CREATE_IDX,
                CREATE_DATE
             )
        VALUES
            (
                #{faqNm},
                #{fmOrder},
                #{useYn},
                #{userIdx},
                SYSDATE()
            )
    </insert>

    <update id="updateFaqMaster" parameterType="map">
        UPDATE faq_master
           SET FAQ_NM= #{faqNm},
               FM_ORDER= #{fmOrder},
               USE_YN= #{useYn},
               UPDATE_IDX=#{userIdx},
               UPDATE_DATE=SYSDATE()
         WHERE IDX= #{idx}

    </update>

    <delete id="deleteFaqMaster" parameterType="map">
        DELETE FROM faq_master
         WHERE IDX = #{idx}
    </delete>

    <select id="findNameFaqMaster" resultType="CustomMap">
        SELECT IDX,
               FAQ_NM
          FROM faq_master
         ORDER BY FM_ORDER
    </select>

    <select id="findAllFaq" resultType="map" parameterType="CustomMap">
        SELECT A.IDX,
               A.MASTER_IDX,
               A.FAQ_QUESTION,
               A.FAQ_ANSWER,
               A.F_ORDER,
               A.USE_YN,
               IFNULL(B.USER_NICKNM,'탈퇴된 관리자')AS CREATE_NICKNM,
               A.CREATE_DATE,
               IFNULL(C.USER_NICKNM,'탈퇴된 관리자')AS UPDATE_NICKNM,
               A.UPDATE_DATE
          FROM faq A
          LEFT JOIN USERS B ON A.CREATE_IDX = B.IDX
          LEFT JOIN USERS C ON A.UPDATE_IDX = C.IDX
         WHERE 1 = 1
        <include refid="criteriaFaq"/>
        <if test='paramMap.masterIdx != "" and paramMap.masterIdx != null'>
           AND MASTER_IDX = #{paramMap.masterIdx}
        </if>
        ORDER BY F_ORDER
    </select>

    <insert id="insertFaq" parameterType="map">
        INSERT INTO faq
            (
                 MASTER_IDX,
                 FAQ_QUESTION,
                 FAQ_ANSWER,
                 F_ORDER,
                 USE_YN,
                 CREATE_IDX,
                 CREATE_DATE
             )
        VALUES
            (
                #{masterIdx},
                #{faqQuestion},
                #{faqAnswer},
                #{fOrder},
                'Y',
                #{userIdx},
                SYSDATE()
            )
    </insert>

    <update id="updateFaq" parameterType="map">
        UPDATE faq
           SET MASTER_IDX = #{masterIdx},
               FAQ_QUESTION = #{faqQuestion},
               FAQ_ANSWER = #{faqAnswer},
               F_ORDER = #{fOrder},
               USE_YN = #{useYn},
               UPDATE_IDX = #{userIdx},
               UPDATE_DATE = SYSDATE()
         WHERE IDX = #{idx}
    </update>

    <delete id="deleteFaq" parameterType="map">
        DELETE FROM faq
         WHERE IDX = #{idx}
    </delete>


    <delete id="deleteFaqGroup" parameterType="map">
        DELETE FROM faq
         WHERE MASTER_IDX = #{idx}
    </delete>



</mapper>