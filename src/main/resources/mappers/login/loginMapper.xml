<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.repository.LoginMapper">

    <select id="findByUserId" parameterType="string" resultType="Users">
        SELECT IDX,
               USER_ID,
               USER_PWD,
               USER_NM,
               USER_NICKNM,
               USER_EMAIL,
               USER_PHONE,
               ROLE_TYPE,
               VERIFICATION_CODE,
               VERIFICATION_YN,
               MARKETING_YN,
               CREATE_DATE,
               UPDATE_DATE
          FROM users
         WHERE USER_ID = #{userId}
    </select>

    <insert id="saveUser" parameterType="map">
        INSERT INTO users
            (
                 USER_ID,
                 USER_PWD,
                 USER_NM,
                 USER_NICKNM,
                 USER_EMAIL,
                 USER_PHONE,
                 VERIFICATION_CODE,
                 VERIFICATION_YN,
                 MARKETING_YN,
                 ROLE_TYPE,
                 DELETE_YN,
                 CREATE_DATE
             )
        VALUES
            (
                #{userId},
                #{userPwd},
                #{userNm},
                #{userNicknm},
                #{userEmail},
                #{userPhone},
                #{verificationCode},
                #{verificationYn},
                #{marketingYn},
                #{roleType},
                'N',
                SYSDATE()
             )

    </insert>

    <insert id="saveAdminTest" parameterType="map">
        INSERT INTO users
            (
                 USER_ID,
                 USER_PWD,
                 USER_NM,
                 USER_NICKNM,
                 USER_EMAIL,
                 ROLE_TYPE,
                 VERIFICATION_CODE,
                 VERIFICATION_YN,
                 DELETE_YN,
                 CREATE_DATE
             )
        VALUES
            (
                #{userId},
                #{userPwd},
                #{userNicknm},
                #{userNicknm},
                '',
                #{roleType},
                #{verificationCode},
                #{verificationYn},
                'N',
                SYSDATE()
             )

    </insert>

    <insert id="saveUserTest" parameterType="map">
        INSERT INTO users
        (
            USER_ID,
            USER_PWD,
            USER_NM,
            USER_NICKNM,
            USER_EMAIL,
            ROLE_TYPE,
            VERIFICATION_YN,
            DELETE_YN,
            CREATE_DATE
        )
        VALUES
            (
                #{userId},
                #{userPwd},
                '테스트유저',
                '테스트1',
                '',
                'ROLE_USER',
                'Y',
                'N',
                SYSDATE()
            )

    </insert>

    <select id="countByUserId" parameterType="string" resultType="int">
        SELECT COUNT(*)
          FROM users
         WHERE user_id = #{userId}
    </select>

    <select id="findByEmailAndUserNm" parameterType="string" resultType="Users">
        SELECT IDX,
               USER_ID,
               USER_PWD,
               USER_NM,
               USER_NICKNM,
               USER_EMAIL,
               USER_PHONE,
               ROLE_TYPE,
               VERIFICATION_CODE,
               VERIFICATION_YN,
               MARKETING_YN,
               DELETE_YN,
               CREATE_DATE,
               UPDATE_DATE
          FROM users
         WHERE USER_NM = #{userNm}
           AND USER_EMAIL = #{email}
    </select>

    <select id="findByUserNmAndUserId" parameterType="string" resultType="Users">
        SELECT IDX,
               USER_ID,
               USER_PWD,
               USER_NM,
               USER_NICKNM,
               USER_EMAIL,
               USER_PHONE,
               ROLE_TYPE,
               VERIFICATION_CODE,
               VERIFICATION_YN,
               MARKETING_YN,
               DELETE_YN,
               CREATE_DATE,
               UPDATE_DATE
          FROM users
         WHERE USER_NM = #{userNm}
           AND USER_ID = #{userId}
    </select>

    <update id="updateUserPwd" parameterType="map">
        UPDATE users
           SET USER_PWD = #{userPwd},
               UPDATE_DATE = SYSDATE()
         WHERE USER_ID = #{userId}
    </update>

    <select id="findUserNicknmVerificationYnEmailIdxByUserId" parameterType="string" resultType="CustomMap">
        SELECT IDX,
               USER_NICKNM,
               VERIFICATION_YN,
               USER_EMAIL
          FROM users
         WHERE USER_ID = #{userId}
    </select>

    <select id="findVerificationCodeByUserIdCode" parameterType="string" resultType="int">
        SELECT EXISTS(
                       SELECT VERIFICATION_CODE
                       FROM users
                       WHERE USER_ID = #{userId}
                         AND VERIFICATION_CODE = #{code}
                     ) AS EXIST
    </select>

    <update id="updateverificationYn" parameterType="string">
        UPDATE users
           SET VERIFICATION_YN = 'Y',
               UPDATE_DATE = SYSDATE()
         WHERE USER_ID = #{userId}
    </update>

    <update id="updateLastLoginDate" parameterType="String">
        UPDATE users
           SET LAST_LOGIN_DATE = SYSDATE()
         WHERE USER_ID = #{userId}
    </update>

    <update id="updateEmailOnly" parameterType="map">
        UPDATE users
           SET USER_EMAIL = #{userEmail}
         WHERE USER_ID = #{userId}
    </update>
</mapper>