<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.repository.BoardMapper">

    <sql id="criteriaBoard">
        <if test="searchType != null and searchKeyword != null">
            <trim prefix="AND (" suffix=")" prefixOverrides="OR">
                <foreach item="type" collection="typeArr">
                    <trim prefix="OR">
                        <choose>
                            <when test="type=='T'.toString()">
                                (BOARD_SUBJECT LIKE CONCAT('%',#{searchKeyword},'%'))
                            </when>
                            <when test="type=='C'.toString()">
                                (BOARD_CONTENT LIKE CONCAT('%',#{searchKeyword},'%'))
                            </when>
                            <when test="type=='W'.toString()">
                                (
                                    A.CREATE_IDX IN
                                        (
                                            SELECT IDX
                                              FROM users
                                             WHERE USER_NICKNM LIKE CONCAT('%',#{searchKeyword},'%')
                                        )
                                )
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </trim>
        </if>
    </sql>

    <select id="countByBoardIdBoard" parameterType="Criteria" resultType="int">
        SELECT COUNT(*)
          FROM (
                    SELECT A.IDX,
                           A.MASTER_IDX,
                           A.BOARD_SUBJECT,
                           A.BOARD_CONTENT,
                           A.HIT,
                           A.CREATE_IDX,
                           A.CREATE_DATE,
                           A.UPDATE_IDX,
                           A.UPDATE_DATE
                      FROM board A
                     INNER JOIN board_master B ON A.MASTER_IDX = B.IDX
                     WHERE B.BOARD_ID = #{paramMap.boardId}
                    <include refid="criteriaBoard"/>
                ) AS CNT_TB
    </select>

    <select id="findAllByBoardIdBoard" resultType="CustomMap" parameterType="Criteria">
        SELECT ROWNUM_TB.*
          FROM (
                    SELECT @ROWNUM:=@ROWNUM+1 AS RN,
                           A.IDX,
                           A.MASTER_IDX,
                           A.BOARD_SUBJECT,
                           A.BOARD_CONTENT,
                           A.HIT,
                           A.THUMBNAIL_YN,
                           IFNULL(C.USER_NICKNM,'탈퇴된 회원')AS CREATE_NICKNM,
                           A.CREATE_DATE,
                           A.UPDATE_IDX,
                           A.UPDATE_DATE,
                           (SELECT COUNT(*)
                              FROM board_comment
                             WHERE BOARD_IDX = A.IDX ) AS CMMT_CNT
                      FROM board A
                     INNER JOIN board_master B ON A.MASTER_IDX = B.IDX
                      LEFT JOIN users C ON A.CREATE_IDX = C.IDX,
                           (SELECT @ROWNUM:=0) temp
                     WHERE B.BOARD_ID = #{paramMap.boardId}
                    <include refid="criteriaBoard"/>
                ) AS ROWNUM_TB
         ORDER BY IDX desc
         LIMIT #{pageStart},#{amount}
    </select>

    <select id="findNoticeByBoardIdBoard" resultType="CustomMap" parameterType="Criteria">
        SELECT A.IDX,
               A.MASTER_IDX,
               A.BOARD_SUBJECT,
               A.BOARD_CONTENT,
               A.HIT,
               IFNULL(C.USER_NICKNM,'탈퇴된 관리자') AS CREATE_NICKNM,
               A.CREATE_DATE,
               A.UPDATE_IDX,
               A.UPDATE_DATE,
               (SELECT COUNT(*)
                  FROM board_comment
                 WHERE BOARD_IDX = A.IDX) AS CMMT_CNT
          FROM board A
         INNER JOIN board_master B ON A.MASTER_IDX = B.IDX
          LEFT JOIN users C ON A.CREATE_IDX = C.IDX
         WHERE B.BOARD_ID = #{paramMap.boardId}
           AND A.NOTICE_YN = 'Y'
         ORDER BY IDX desc
    </select>

    <select id="findByBoardIdBoardMaster" parameterType="string" resultType="CustomMap">
        SELECT IDX,
               BOARD_ID,
               BOARD_NM,
               BOARD_DESC,
               BOARD_TYPE,
               LIST_LEVEL,
               READ_LEVEL,
               WRITE_LEVEL,
               COMMENT_LEVEL,
               UPLOAD_LEVEL,
               EDITOR_LEVEL,
               USE_YN,
               CREATE_IDX,
               CREATE_DATE,
               UPDATE_IDX,
               UPDATE_DATE
          FROM board_master
         WHERE BOARD_ID = #{boardId}
    </select>

    <insert id="insertBoard" parameterType="Board" useGeneratedKeys="true" keyProperty="idx">
        INSERT INTO board
            (
                 MASTER_IDX,
                 BOARD_SUBJECT,
                 BOARD_CONTENT,
                 HIT,
                 ATTACH_FILE_IDX,
                 NOTICE_YN,
                 THUMBNAIL_YN,
                 DELETE_YN,
                 CREATE_IDX,
                 CREATE_DATE,
                 UPDATE_IDX,
                 UPDATE_DATE
            )
        VALUES
            (
                 #{masterIdx},
                 #{boardSubject},
                 #{boardContent},
                 0,
                 #{attachFileIdx},
                 #{noticeYn},
                 #{thumbnailYn},
                 'N',
                 #{createIdx},
                 SYSDATE(),
                 NULL,
                 SYSDATE()
             )
    </insert>

    <select id="findAllByIdx" parameterType="map" resultType="CustomMap">
        SELECT A.IDX,
               A.MASTER_IDX,
               A.BOARD_SUBJECT,
               A.BOARD_CONTENT,
               A.HIT,
               A.THUMBNAIL_YN,
               A.DELETE_YN,
               E.IDX AS ATTACH_FILE_IDX,
               IFNULL(C.USER_NICKNM,'탈퇴된 회원')AS CREATE_NICKNM,
               A.CREATE_DATE,
               IF( A.UPDATE_IDX IS NULL , NULL, IFNULL(D.USER_NICKNM,'탈퇴된 회원')) AS UPDATE_NICKNM,
               A.UPDATE_DATE
          FROM board A
         INNER JOIN board_master B ON A.MASTER_IDX = B.IDX
          LEFT JOIN users C ON A.CREATE_IDX = C.IDX
          LEFT JOIN users D ON A.UPDATE_IDX = D.IDX
          LEFT JOIN ATTACH_FILE_MASTER E ON A.ATTACH_FILE_IDX = E.IDX
         WHERE A.IDX = #{idx}
           AND B.BOARD_ID = #{boardId}
    </select>


    <select id="findAllByIdxList" parameterType="map" resultType="CustomMap">
        SELECT A.IDX,
               A.MASTER_IDX,
               A.BOARD_SUBJECT,
               A.BOARD_CONTENT,
               A.HIT,
               A.THUMBNAIL_YN,
               A.DELETE_YN,
               E.IDX AS ATTACH_FILE_IDX,
               IFNULL(C.USER_NICKNM,'탈퇴된 회원')AS CREATE_NICKNM,
               A.CREATE_DATE,
               IF( A.UPDATE_IDX IS NULL , NULL, IFNULL(D.USER_NICKNM,'탈퇴된 회원')) AS UPDATE_NICKNM,
               A.UPDATE_DATE
        FROM board A
                 INNER JOIN board_master B ON A.MASTER_IDX = B.IDX
                 LEFT JOIN users C ON A.CREATE_IDX = C.IDX
                 LEFT JOIN users D ON A.UPDATE_IDX = D.IDX
                 LEFT JOIN ATTACH_FILE_MASTER E ON A.ATTACH_FILE_IDX = E.IDX
        WHERE A.IDX IN
            <foreach collection="idx" item="idx" open="(" close=")" separator=",">
                #{idx}
            </foreach>
          AND B.BOARD_ID = #{boardId}
    </select>

    <!--TODO 재귀 예시-->

    <!-- 재귀쿼리 예시 -->
    <select id="findAllByIdxBoardCommentEX" parameterType="int" resultType="map">
        WITH RECURSIVE CTE AS
                           (
                               SELECT IDX,
                                      convert(idx, char(100)) AS CTE_PATH,
                                      1 LVL,
                                      BOARD_IDX,
                                      PARENT_IDX,
                                      COMMENT_CONTENT,
                                      DELETE_YN,
                                      CREATE_IDX,
                                      CREATE_DATE,
                                      UPDATE_IDX,
                                      UPDATE_DATE
                                 FROM board_comment
                                WHERE IDX = #{idx}
                                UNION ALL
                               SELECT A.IDX,
                                      concat(CTE.CTE_PATH, '-', A.IDX) AS CTE_PATH,
                                      LVL + 1 LVL,
                                      A.BOARD_IDX,
                                      A.PARENT_IDX,
                                      A.COMMENT_CONTENT,
                                      A.DELETE_YN,
                                      A.CREATE_IDX,
                                      A.CREATE_DATE,
                                      A.UPDATE_IDX,
                                      A.UPDATE_DATE
                                 FROM board_comment A
                                INNER JOIN CTE ON A.PARENT_IDX = CTE.IDX
                           )
        SELECT IDX,
               PARENT_IDX,
               LVL,
               CTE_PATH,
               COMMENT_CONTENT,
               DELETE_YN,
               CREATE_IDX,
               CREATE_DATE,
               UPDATE_IDX,
               UPDATE_DATE
        FROM CTE
    </select>

    <insert id="insertBoardComment" parameterType="BoardComment">
        INSERT INTO board_comment
            (
                 BOARD_IDX,
                 PARENT_IDX,
                 COMMENT_CONTENT,
                 CREATE_IDX,
                 CREATE_DATE
            )
        VALUES
            (
                 #{boardIdx},
                 #{parentIdx},
                 #{commentContent},
                 #{createIdx},
                 SYSDATE()
            )
    </insert>

    <update id="updateBoardComment" parameterType="BoardComment">
        UPDATE board_comment
           SET COMMENT_CONTENT = #{commentContent},
               UPDATE_IDX = #{updateIdx},
               UPDATE_DATE = SYSDATE()
         WHERE IDX= #{idx}
    </update>

    <update id="deleteBoardCommentUser" parameterType="BoardComment">
        UPDATE board_comment
           SET DELETE_YN = 'Y',
               UPDATE_IDX = #{updateIdx},
               UPDATE_DATE = SYSDATE()
         WHERE IDX= #{idx}
    </update>

    <delete id="deleteBoardCommentAdmin" parameterType="map">
        DELETE FROM board_comment
         WHERE IDX IN (
                           WITH RECURSIVE CTE AS
                               (
                                    SELECT IDX
                                      FROM board_comment
                                     WHERE IDX = #{idx}
                                     UNION ALL
                                    SELECT A.IDX
                                      FROM board_comment A
                                     INNER JOIN CTE ON A.PARENT_IDX = CTE.IDX
                                )
                           SELECT IDX
                             FROM CTE
                      )
    </delete>

    <delete id="deleteBoardCommentWithBoard" parameterType="map">
        DELETE FROM board_comment
         WHERE BOARD_IDX IN
        <foreach collection="idx" item="idx" open="(" close=")" separator=",">
            #{idx}
        </foreach>
    </delete>

    <update id="updateBoard" parameterType="Board">
        UPDATE board
           SET BOARD_SUBJECT=#{boardSubject},
               BOARD_CONTENT=#{boardContent},
               ATTACH_FILE_IDX= #{attachFileIdx},
               NOTICE_YN= #{noticeYn},
               THUMBNAIL_YN= #{thumbnailYn},
               DELETE_YN= #{deleteYn},
               UPDATE_IDX= #{updateIdx},
               UPDATE_DATE= SYSDATE()
         WHERE IDX= #{idx}
    </update>

    <update id="deleteBoardUser" parameterType="map">
        UPDATE board
           SET DELETE_YN = 'Y',
               UPDATE_DATE = SYSDATE(),
               UPDATE_IDX = #{userIdx}
         WHERE IDX = #{idx}
    </update>

    <delete id="deleteAllBoardAdmin" parameterType="map">
        DELETE FROM board
         WHERE IDX IN
        <foreach collection="idx" item="idx" open="(" close=")" separator=",">
            #{idx}
        </foreach>
    </delete>
    <delete id="deleteOneBoardAdmin" parameterType="map">
        DELETE FROM board
         WHERE IDX = #{idx}
    </delete>

    <select id="findAllByIdxBoardMaster" parameterType="map" resultType="BoardMaster">
        SELECT IDX,
               BOARD_ID,
               BOARD_NM,
               BOARD_DESC,
               BOARD_TYPE,
               LIST_LEVEL,
               READ_LEVEL,
               WRITE_LEVEL,
               COMMENT_LEVEL,
               UPLOAD_LEVEL,
               EDITOR_LEVEL,
               USE_YN,
               CREATE_IDX,
               CREATE_DATE,
               UPDATE_IDX,
               UPDATE_DATE
          FROM board_master
         WHERE BOARD_ID = #{boardId}
    </select>

    <select id="findBoardMaster" resultType="CustomMap">
        SELECT IDX,
               BOARD_NM,
               BOARD_TYPE,
               USE_YN
          FROM board_master
    </select>
    <update id="moveBoards" parameterType="map">
        UPDATE board
           SET MASTER_IDX  = #{masterIdx},
               UPDATE_IDX = #{userIdx},
               UPDATE_DATE = SYSDATE()
         WHERE IDX IN
        <foreach collection="idx" item="idx" open="(" close=")" separator=",">
            #{idx}
        </foreach>
    </update>

    <update id="incrementBoardHit" parameterType="int">
        UPDATE board
           SET HIT = HIT +1
         WHERE IDX = #{idx}
    </update>

    <select id="findCreateIdxByIdx" parameterType="map" resultType="int">
        SELECT CREATE_IDX
          FROM board
         WHERE IDX = #{idx}
    </select>

    <select id="findAllByIdxBoardComment" parameterType="map" resultType="CustomMap">
        WITH RECURSIVE CTE AS
           (
               SELECT IDX,
                      convert(idx, char(100)) AS CTE_PATH,
                      1 LVL,
                      BOARD_IDX,
                      PARENT_IDX,
                      COMMENT_CONTENT,
                      DELETE_YN,
                      CREATE_IDX,
                      CREATE_DATE,
                      UPDATE_IDX,
                      UPDATE_DATE
                 FROM board_comment
                WHERE BOARD_IDX = #{idx}
                  AND PARENT_IDX = 0
                UNION ALL
               SELECT A.IDX,
                      concat(CTE.CTE_PATH, '-', A.IDX) AS CTE_PATH,
                      LVL + 1 LVL,
                      A.BOARD_IDX,
                      A.PARENT_IDX,
                      A.COMMENT_CONTENT,
                      A.DELETE_YN,
                      A.CREATE_IDX,
                      A.CREATE_DATE,
                      A.UPDATE_IDX,
                      A.UPDATE_DATE
                 FROM board_comment A
                INNER JOIN CTE ON A.PARENT_IDX = CTE.IDX
           )
        SELECT IDX,
               BOARD_IDX,
               PARENT_IDX,
               LVL,
               CTE_PATH,
               COMMENT_CONTENT,
               DELETE_YN,
               CREATE_IDX,
               CREATE_DATE,
               UPDATE_IDX,
               UPDATE_DATE
          FROM CTE
    </select>
</mapper>