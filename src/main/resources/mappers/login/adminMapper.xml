<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.repository.AdminMapper">

    <select id="findAllMenuTree" resultType="MenuTree">
        WITH RECURSIVE CTE AS
            (
                SELECT IDX,
                       PARENT_IDX,
                       NAME,
                       LVL,
                       CREATE_IDX,
                       CREATE_DATE,
                       USE_YN
                  FROM MENU_TREE
                 WHERE LVL = 1
                 UNION ALL
                SELECT IDX,
                       PARENT_IDX,
                       NAME,
                       LVL,
                       CREATE_IDX,
                       CREATE_DATE,
                       USE_YN
                  FROM MENU_TREE
                 WHERE IDX != PARENT_IDX
            )
        SELECT IDX,
               PARENT_IDX,
               NAME,
               LVL,
               CREATE_IDX,
               CREATE_DATE,
               USE_YN
          FROM CTE
         ORDER BY PARENT_IDX, IDX
    </select>

    <insert id="insertMenuTree" parameterType="MenuTree">
        INSERT INTO menu_tree
            (
                 IDX,
                 PARENT_IDX,
                 LVL,
                 NAME,
                 LINK,
                 CREATE_IDX,
                 CREATE_DATE,
                 USE_YN
             )
        VALUES
        <foreach collection="list" item="item" separator=" , ">
            (
                 #{item.idx},
                 #{item.parentIdx},
                 #{item.lvl},
                 #{item.name},
                 #{item.link},
                 #{item.writeId},
                 SYSDATE(),
                 #{item.useYn}
            )
        </foreach>

    </insert>

    <delete id="deleteMenuTree">

        DELETE FROM menu_tree
         WHERE EXISTS (
                           SELECT 1
                             FROM menu_tree
                      )
    </delete>

    <select id="findAllBoardMaster" resultType="CustomMap" parameterType="Search">
        SELECT A.IDX,
               A.board_ID,
               A.BOARD_NM,
               A.BOARD_DESC,
               A.BOARD_TYPE,
               A.FILE_ATTACH_YN,
               A.USE_YN,
               IFNULL(C.USER_NICKNM,'탈퇴된 관리자')AS CREATE_NICKNM,
               A.CREATE_IDX,
               A.CREATE_DATE,
               IFNULL(D.USER_NICKNM,'탈퇴된 관리자')AS UPDATE_NICKNM,
               A.UPDATE_IDX,
               A.UPDATE_DATE,
               A.DELETE_YN,
               IFNULL(B.CNT,'0') AS CNT
          FROM board_master A
          LEFT JOIN (
                        SELECT COUNT(A.IDX) AS CNT,
                               MASTER_IDX
                          FROM BOARD A
                          LEFT JOIN BOARD_MASTER B ON A.MASTER_IDX = B.IDX
                         WHERE A.MASTER_IDX = B.IDX
                         GROUP BY MASTER_IDX
                    ) B ON A.IDX = B.MASTER_IDX
          LEFT JOIN USERS C ON A.CREATE_IDX = C.IDX
          LEFT JOIN USERS D ON A.UPDATE_IDX = D.IDX
         WHERE A.DELETE_YN = 'N'
        <if test="searchType != null and searchValue != null and searchValue != ''">
            <choose>
                <when test='searchType == "boardNm"'>
                    AND BOARD_NM LIKE '%' || #{keyword} || '%'
                </when>
                <when test='searchType == "createIdx"'>
                    AND IDX IN
                            (
                                SELECT CREATE_IDX
                                  FROM USERS
                                 WHERE USER_ID LIKE '%' || #{keyword} || '%'
                            )
                </when>
                <otherwise>
                    AND (
                            BOARD_NM LIKE '%' || #{keyword} || '%'
                            OR (
                                    IDX IN
                                            (
                                                SELECT CREATE_IDX
                                                  FROM USERS
                                                 WHERE USER_ID LIKE '%' || #{keyword} || '%'
                                            )
                                )
                        )
                </otherwise>
            </choose>
        </if>
    </select>

    <insert id="insertBoardMaster" parameterType="map">
        INSERT INTO board_master
            (
                 BOARD_ID,
                 BOARD_NM,
                 BOARD_DESC,
                 BOARD_TYPE,
                 FILE_ATTACH_YN,
                 USE_YN,
                 CREATE_IDX,
                 CREATE_DATE,
                 UPDATE_IDX,
                 UPDATE_DATE,
                 DELETE_YN
             )
        VALUES
            (
                 #{boardId},
                 #{boardNm},
                 #{boardDesc},
                 #{boardType},
                 #{fileAttachYn},
                 #{useYn},
                 #{userIdx},
                 date_format(SYSDATE(), '%Y-%m-%d %h:%i:%s'),
                 NULL,
                 NULL,
                 'N'
            )
    </insert>

    <select id="existsBoardId" parameterType="map" resultType="int">
        SELECT COUNT(*)
          FROM board_master
         WHERE BOARD_ID = #{boardId}
    </select>

    <update id="updateBoardMaster" parameterType="map">

        UPDATE board_master
           SET BOARD_ID= #{boardId},
               BOARD_NM= #{boardNm},
               BOARD_DESC= #{boardDesc},
               BOARD_TYPE=#{boardType},
               FILE_ATTACH_YN=#{fileAttachYn},
               USE_YN=#{useYn},
               UPDATE_IDX= #{userIdx},
               UPDATE_DATE= SYSDATE()
         WHERE IDX= #{idx}

    </update>

    <select id="findByIdxBoardMaster" parameterType="int" resultType="BoardMaster">
        SELECT A.IDX,
               A.board_ID,
               A.BOARD_NM,
               A.BOARD_DESC,
               A.BOARD_TYPE,
               A.FILE_ATTACH_YN,
               A.USE_YN,
               IFNULL(C.USER_NICKNM,'탈퇴된 관리자') AS CREATE_NICKNM,
               A.CREATE_IDX,
               A.CREATE_DATE,
               IFNULL(D.USER_NICKNM,'탈퇴된 관리자') AS UPDATE_NICKNM,
               A.UPDATE_IDX,
               A.UPDATE_DATE,
               A.DELETE_YN,
               IFNULL(B.CNT,'0') AS CNT
          FROM board_master A
          LEFT JOIN (
                        SELECT COUNT(A.IDX) AS CNT,
                               MASTER_IDX
                          FROM BOARD A
                          LEFT JOIN BOARD_MASTER B ON A.MASTER_IDX = B.IDX
                         WHERE A.MASTER_IDX = B.IDX
                         GROUP BY MASTER_IDX
                    ) B ON A.IDX = B.MASTER_IDX
          LEFT JOIN USERS C ON A.CREATE_IDX = C.IDX
          LEFT JOIN USERS D ON A.UPDATE_IDX = D.IDX
         WHERE A.IDX = #{idx}
    </select>

    <update id="deleteBoardMaster" parameterType="map">
        UPDATE board_master
           SET BOARD_ID = NULL,
               UPDATE_IDX= #{userIdx},
               UPDATE_DATE= SYSDATE(),
               DELETE_YN = 'Y'
         WHERE IDX= #{idx}
    </update>

    <select id="findAllContent" parameterType="map" resultType="CustomMap">
        SELECT IDX,
               CONTENT_ID,
               CONTENT_NM,
               CONTENT_HTML,
               HIT,
               OPEN_YN,
               USE_YN,
               CREATE_IDX,
               CREATE_DATE,
               UPDATE_IDX,
               UPDATE_DATE
          FROM content
         WHERE 1=1
            <if test="searchType != null">

            </if>
    </select>

    <select id="findByIdxContent" resultType="Content" parameterType="int">
        SELECT CONTENT_ID,
               CONTENT_NM,
               CONTENT_HTML,
               HIT,
               OPEN_YN,
               USE_YN,
               CREATE_IDX,
               CREATE_DATE,
               UPDATE_IDX,
               UPDATE_DATE
          FROM CONTENT
         WHERE IDX = #{idx}
    </select>

    <insert id="insertContent" parameterType="map">
        INSERT INTO content
            (
                 CONTENT_ID,
                 CONTENT_NM,
                 CONTENT_HTML,
                 HIT,
                 OPEN_YN,
                 USE_YN,
                 CREATE_IDX,
                 CREATE_DATE
             )
        VALUES
            (
                #{contentId},
                #{contentNm},
                #{contentHtml},
                0,
                #{openYn},
                'Y'
                #{userId},
                SYSDATE
            )

    </insert>
</mapper>