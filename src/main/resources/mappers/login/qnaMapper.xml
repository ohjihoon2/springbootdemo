<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.repository.QnaMapper">

    <sql id="criteriaQna">
        <if test="searchType != null and searchKeyword != null">
            <trim prefix="AND (" suffix=")" prefixOverrides="OR">
                <foreach item="type" collection="typeArr">
                    <trim prefix="OR">
                        <choose>
                            <when test="type=='T'.toString()">
                                (QA_SUBJECT LIKE CONCAT('%',#{searchKeyword},'%'))
                            </when>
                            <when test="type=='W'.toString()">
                                (
                                    A.CREATE_IDX IN
                                    (
                                        SELECT IDX
                                          FROM users
                                         WHERE USER_NICKNM LIKE CONCAT('%',#{searchKeyword},'%')
                                    )
                                )
                            </when>
                        </choose>
                    </trim>
                </foreach>
            </trim>
        </if>
    </sql>

    <select id="countByQna" resultType="int" parameterType="Criteria">
        SELECT COUNT(*)
          FROM (
                    SELECT B.QA_CATEGORY,
                           B.QA_STATUS,
                           B.SECRET_YN,
                           A.IDX,
                           A.PARENT_IDX,
                           A.QA_SUBJECT,
                           A.QA_CONTENT,
                           A.ATTACH_FILE_IDX,
                           A.CREATE_IDX,
                           A.CREATE_DATE,
                           A.UPDATE_IDX,
                           A.UPDATE_DATE
                      FROM qna A
                     INNER JOIN qna_config B ON A.IDX = B.QA_IDX
                     WHERE B.DELETE_YN = 'N'
                    <include refid="criteriaQna"/>
                ) AS CNT_TB
    </select>

    <select id="findAllQna" parameterType="Criteria" resultType="CustomMap">
        SELECT ROWNUM_TB.*
          FROM (
                    SELECT @ROWNUM:=@ROWNUM+1 AS RN,
                           B.QA_CATEGORY,
                           B.QA_STATUS,
                           D.CODE_NM AS QA_STATUS_CODE_NM,
                           B.SECRET_YN,
                           B.IDX,
                           A.PARENT_IDX,
                           A.QA_SUBJECT,
                           A.QA_CONTENT,
                           A.ATTACH_FILE_IDX,
                           A.CREATE_IDX,
                           IFNULL(C.USER_NICKNM,'탈퇴된 회원')AS CREATE_NICKNM,
                           A.CREATE_DATE
                      FROM qna A
                     INNER JOIN qna_config B ON A.IDX = B.QA_IDX
                      LEFT JOIN users C ON A.CREATE_IDX = C.IDX
                      LEFT JOIN code D ON B.QA_STATUS = D.CODE AND D.CODE_GROUP_ID = 'QA_STATUS_CODE',
                           (SELECT @ROWNUM:=0) temp
                     WHERE B.DELETE_YN = 'N'
                     <include refid="criteriaQna"/>
              ) AS ROWNUM_TB
         ORDER BY IDX DESC
         LIMIT #{pageStart},#{amount}
    </select>

    <select id="findByIdxQnaConfig" parameterType="int" resultType="CustomMap">
        SELECT IDX,
               QA_IDX,
               QA_EMAIL_RECV_YN,
               QA_CATEGORY,
               QA_STATUS,
               SECRET_YN,
               DELETE_YN,
               CREATE_IDX,
               CREATE_DATE
          FROM qna_config
         WHERE IDX = #{idx}
    </select>

    <select id="findByIdxQna" resultType="CustomMap" parameterType="int">
        SELECT A.IDX,
               QA_SUBJECT,
               QA_CONTENT,
               ATTACH_FILE_IDX,
               IF( A.CREATE_IDX IS NULL , NULL, IFNULL(B.USER_NICKNM,'탈퇴된 사용자')) AS CREATE_NICKNM,
               A.CREATE_DATE,
               C.USER_NICKNM AS UPDATE_NICKNM,
               B.UPDATE_DATE
          FROM qna A
          LEFT OUTER JOIN users B on A.CREATE_IDX = B.IDX
          LEFT OUTER JOIN users C on B.UPDATE_IDX = C.IDX
         WHERE A.IDX = #{idx}
            OR A.PARENT_IDX = #{idx}
         ORDER BY A.IDX
    </select>

    <select id="findAllQaCategory" resultType="string">
        SELECT QA_CATEGORY_LIST
          FROM config
    </select>

    <insert id="insertQna" parameterType="QnaConfig" useGeneratedKeys="true" keyProperty="idx">
        INSERT INTO qna
            (
                PARENT_IDX,
                QA_SUBJECT,
                QA_CONTENT,
                ATTACH_FILE_IDX,
                CREATE_IDX,
                CREATE_DATE
            )
        VALUES
            (
                #{parentIdx},
                #{qaSubject},
                #{qaContent},
                #{attachFileIdx},
                #{createIdx},
                SYSDATE()
            )
    </insert>

    <insert id="insertQnaConfig" parameterType="QnaConfig">
        INSERT INTO qna_config
            (
                QA_IDX,
                QA_EMAIL_RECV_YN,
                QA_CATEGORY,
                QA_STATUS,
                SECRET_YN,
                CREATE_IDX,
                CREATE_DATE
            )
        VALUES
            (
                #{qaIdx},
                #{qaEmailRecvYn},
                #{qaCategory},
                #{qaStatus},
                #{secretYn},
                #{createIdx},
                SYSDATE()
            )
    </insert>

    <update id="updateQuestion" parameterType="map">
        UPDATE qna
           SET QA_SUBJECT = #{qaSubject},
               QA_CONTENT = #{qaContent},
               ATTACH_FILE_IDX = #{attachFileIdx},
               UPDATE_IDX = #{userIdx},
               UPDATE_DATE = SYSDATE()
         WHERE IDX = #{qaIdx}
    </update>

    <update id="updateQnaConfig" parameterType="QnaConfig">
        UPDATE qna_config
           SET QA_STATUS = #{qaStatus},
               UPDATE_IDX = #{updateIdx},
               UPDATE_DATE = SYSDATE()
         WHERE QA_IDX = #{qaIdx}
    </update>

    <select id="findAttachFileIdxByIdxQna" parameterType="int" resultType="Qna">
        SELECT A.IDX AS IDX,
               B.IDX AS ATTACH_FILE_IDX
        FROM qna A
                 LEFT JOIN ATTACH_FILE_MASTER B ON A.ATTACH_FILE_IDX = B.IDX
        WHERE A.IDX = #{idx}
           OR PARENT_IDX =#{idx}
        ORDER BY A.IDX
    </select>

    <select id="findByAttachFileIdx" resultType="AttachFile" parameterType="int">
        SELECT IDX,
               FILE_SN,
               ORIGINAL_NAME,
               SAVE_NAME,
               `SIZE`,
               EXTENSION,
               CREATE_IDX,
               CREATE_DATE,
               DELETE_YN,
               DELETE_DATE
        FROM attach_file
        WHERE IDX = #{idx}
    </select>

    <select id="findByMaxIdxQna" resultType="CustomMap" parameterType="int">
        SELECT A.IDX,
               QA_SUBJECT,
               QA_CONTENT,
               ATTACH_FILE_IDX,
               IF( A.CREATE_IDX IS NULL , NULL, IFNULL(B.USER_NICKNM,'탈퇴된 사용자')) AS CREATE_NICKNM,
               A.CREATE_DATE,
               C.USER_NICKNM AS UPDATE_NICKNM,
               B.UPDATE_DATE
        FROM qna A
                 LEFT OUTER JOIN users B on A.CREATE_IDX = B.IDX
                 LEFT OUTER JOIN users C on B.UPDATE_IDX = C.IDX
        WHERE A.IDX = (
                           SELECT MAX(IDX) AS IDX
                             FROM qna
                            WHERE IDX = #{idx}
                               OR A.PARENT_IDX = #{idx}
                      )
    </select>
</mapper>